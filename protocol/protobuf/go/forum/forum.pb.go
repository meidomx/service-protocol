// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: forum/forum.proto

package forum

import (
	shared "github.com/meidomx/service-protocol/protocol/protobuf/go/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Forum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId          string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	UserId           string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ForumName        string `protobuf:"bytes,11,opt,name=forum_name,json=forumName,proto3" json:"forum_name,omitempty"`
	ForumDescription string `protobuf:"bytes,12,opt,name=forum_description,json=forumDescription,proto3" json:"forum_description,omitempty"`
	TimeCreated      int64  `protobuf:"varint,21,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated      int64  `protobuf:"varint,22,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
}

func (x *Forum) Reset() {
	*x = Forum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Forum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Forum) ProtoMessage() {}

func (x *Forum) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Forum.ProtoReflect.Descriptor instead.
func (*Forum) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{0}
}

func (x *Forum) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *Forum) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Forum) GetForumName() string {
	if x != nil {
		return x.ForumName
	}
	return ""
}

func (x *Forum) GetForumDescription() string {
	if x != nil {
		return x.ForumDescription
	}
	return ""
}

func (x *Forum) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Forum) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId      string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ForumId       string `protobuf:"bytes,2,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	UserId        string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ThreadTitle   string `protobuf:"bytes,11,opt,name=thread_title,json=threadTitle,proto3" json:"thread_title,omitempty"`
	ThreadContent string `protobuf:"bytes,12,opt,name=thread_content,json=threadContent,proto3" json:"thread_content,omitempty"`
	TimeCreated   int64  `protobuf:"varint,21,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated   int64  `protobuf:"varint,22,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{1}
}

func (x *Thread) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Thread) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *Thread) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Thread) GetThreadTitle() string {
	if x != nil {
		return x.ThreadTitle
	}
	return ""
}

func (x *Thread) GetThreadContent() string {
	if x != nil {
		return x.ThreadContent
	}
	return ""
}

func (x *Thread) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Thread) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

type ThreadLite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId      string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	ForumId       string `protobuf:"bytes,2,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	UserId        string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ThreadTitle   string `protobuf:"bytes,11,opt,name=thread_title,json=threadTitle,proto3" json:"thread_title,omitempty"`
	ThreadContent string `protobuf:"bytes,12,opt,name=thread_content,json=threadContent,proto3" json:"thread_content,omitempty"`
	TimeCreated   int64  `protobuf:"varint,21,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated   int64  `protobuf:"varint,22,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
}

func (x *ThreadLite) Reset() {
	*x = ThreadLite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ThreadLite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ThreadLite) ProtoMessage() {}

func (x *ThreadLite) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ThreadLite.ProtoReflect.Descriptor instead.
func (*ThreadLite) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{2}
}

func (x *ThreadLite) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *ThreadLite) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *ThreadLite) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ThreadLite) GetThreadTitle() string {
	if x != nil {
		return x.ThreadTitle
	}
	return ""
}

func (x *ThreadLite) GetThreadContent() string {
	if x != nil {
		return x.ThreadContent
	}
	return ""
}

func (x *ThreadLite) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *ThreadLite) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

type Reply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId      string `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	ThreadId     string `protobuf:"bytes,2,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId       string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ReplyTitle   string `protobuf:"bytes,11,opt,name=reply_title,json=replyTitle,proto3" json:"reply_title,omitempty"`
	ReplyContent string `protobuf:"bytes,12,opt,name=reply_content,json=replyContent,proto3" json:"reply_content,omitempty"`
	TimeCreated  int64  `protobuf:"varint,21,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated  int64  `protobuf:"varint,22,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
}

func (x *Reply) Reset() {
	*x = Reply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reply) ProtoMessage() {}

func (x *Reply) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reply.ProtoReflect.Descriptor instead.
func (*Reply) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{3}
}

func (x *Reply) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *Reply) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *Reply) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Reply) GetReplyTitle() string {
	if x != nil {
		return x.ReplyTitle
	}
	return ""
}

func (x *Reply) GetReplyContent() string {
	if x != nil {
		return x.ReplyContent
	}
	return ""
}

func (x *Reply) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Reply) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

type CreateForumReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId           string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ForumName        string `protobuf:"bytes,2,opt,name=forum_name,json=forumName,proto3" json:"forum_name,omitempty"`
	ForumDescription string `protobuf:"bytes,3,opt,name=forum_description,json=forumDescription,proto3" json:"forum_description,omitempty"`
}

func (x *CreateForumReq) Reset() {
	*x = CreateForumReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForumReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForumReq) ProtoMessage() {}

func (x *CreateForumReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForumReq.ProtoReflect.Descriptor instead.
func (*CreateForumReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{4}
}

func (x *CreateForumReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateForumReq) GetForumName() string {
	if x != nil {
		return x.ForumName
	}
	return ""
}

func (x *CreateForumReq) GetForumDescription() string {
	if x != nil {
		return x.ForumDescription
	}
	return ""
}

type CreateForumRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Forum  *Forum         `protobuf:"bytes,2,opt,name=forum,proto3" json:"forum,omitempty"`
}

func (x *CreateForumRes) Reset() {
	*x = CreateForumRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateForumRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateForumRes) ProtoMessage() {}

func (x *CreateForumRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateForumRes.ProtoReflect.Descriptor instead.
func (*CreateForumRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{5}
}

func (x *CreateForumRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateForumRes) GetForum() *Forum {
	if x != nil {
		return x.Forum
	}
	return nil
}

type ListAllForumsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListAllForumsReq) Reset() {
	*x = ListAllForumsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllForumsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllForumsReq) ProtoMessage() {}

func (x *ListAllForumsReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllForumsReq.ProtoReflect.Descriptor instead.
func (*ListAllForumsReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{6}
}

type ListAllForumsRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Forums []*Forum       `protobuf:"bytes,2,rep,name=forums,proto3" json:"forums,omitempty"`
}

func (x *ListAllForumsRes) Reset() {
	*x = ListAllForumsRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListAllForumsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListAllForumsRes) ProtoMessage() {}

func (x *ListAllForumsRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListAllForumsRes.ProtoReflect.Descriptor instead.
func (*ListAllForumsRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{7}
}

func (x *ListAllForumsRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *ListAllForumsRes) GetForums() []*Forum {
	if x != nil {
		return x.Forums
	}
	return nil
}

type QueryForumByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
}

func (x *QueryForumByIdReq) Reset() {
	*x = QueryForumByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryForumByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryForumByIdReq) ProtoMessage() {}

func (x *QueryForumByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryForumByIdReq.ProtoReflect.Descriptor instead.
func (*QueryForumByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{8}
}

func (x *QueryForumByIdReq) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

type QueryForumByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Forum  *Forum         `protobuf:"bytes,2,opt,name=forum,proto3" json:"forum,omitempty"`
}

func (x *QueryForumByIdRes) Reset() {
	*x = QueryForumByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryForumByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryForumByIdRes) ProtoMessage() {}

func (x *QueryForumByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryForumByIdRes.ProtoReflect.Descriptor instead.
func (*QueryForumByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{9}
}

func (x *QueryForumByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryForumByIdRes) GetForum() *Forum {
	if x != nil {
		return x.Forum
	}
	return nil
}

type UpdateForumByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId          string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	ForumName        string `protobuf:"bytes,2,opt,name=forum_name,json=forumName,proto3" json:"forum_name,omitempty"`
	ForumDescription string `protobuf:"bytes,3,opt,name=forum_description,json=forumDescription,proto3" json:"forum_description,omitempty"`
}

func (x *UpdateForumByIdReq) Reset() {
	*x = UpdateForumByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateForumByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateForumByIdReq) ProtoMessage() {}

func (x *UpdateForumByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateForumByIdReq.ProtoReflect.Descriptor instead.
func (*UpdateForumByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateForumByIdReq) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *UpdateForumByIdReq) GetForumName() string {
	if x != nil {
		return x.ForumName
	}
	return ""
}

func (x *UpdateForumByIdReq) GetForumDescription() string {
	if x != nil {
		return x.ForumDescription
	}
	return ""
}

type UpdateForumByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Forum  *Forum         `protobuf:"bytes,2,opt,name=forum,proto3" json:"forum,omitempty"`
}

func (x *UpdateForumByIdRes) Reset() {
	*x = UpdateForumByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateForumByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateForumByIdRes) ProtoMessage() {}

func (x *UpdateForumByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateForumByIdRes.ProtoReflect.Descriptor instead.
func (*UpdateForumByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateForumByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UpdateForumByIdRes) GetForum() *Forum {
	if x != nil {
		return x.Forum
	}
	return nil
}

type DeleteForumByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
}

func (x *DeleteForumByIdReq) Reset() {
	*x = DeleteForumByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForumByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForumByIdReq) ProtoMessage() {}

func (x *DeleteForumByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForumByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteForumByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteForumByIdReq) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

type DeleteForumByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteForumByIdRes) Reset() {
	*x = DeleteForumByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteForumByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteForumByIdRes) ProtoMessage() {}

func (x *DeleteForumByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteForumByIdRes.ProtoReflect.Descriptor instead.
func (*DeleteForumByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteForumByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateThreadReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title   string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateThreadReq) Reset() {
	*x = CreateThreadReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadReq) ProtoMessage() {}

func (x *CreateThreadReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadReq.ProtoReflect.Descriptor instead.
func (*CreateThreadReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{14}
}

func (x *CreateThreadReq) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *CreateThreadReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateThreadReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateThreadReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateThreadRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Thread *Thread        `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *CreateThreadRes) Reset() {
	*x = CreateThreadRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateThreadRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateThreadRes) ProtoMessage() {}

func (x *CreateThreadRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateThreadRes.ProtoReflect.Descriptor instead.
func (*CreateThreadRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{15}
}

func (x *CreateThreadRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateThreadRes) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type QueryThreadByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *QueryThreadByIdReq) Reset() {
	*x = QueryThreadByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryThreadByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryThreadByIdReq) ProtoMessage() {}

func (x *QueryThreadByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryThreadByIdReq.ProtoReflect.Descriptor instead.
func (*QueryThreadByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{16}
}

func (x *QueryThreadByIdReq) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type QueryThreadByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Thread *Thread        `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *QueryThreadByIdRes) Reset() {
	*x = QueryThreadByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryThreadByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryThreadByIdRes) ProtoMessage() {}

func (x *QueryThreadByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryThreadByIdRes.ProtoReflect.Descriptor instead.
func (*QueryThreadByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{17}
}

func (x *QueryThreadByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryThreadByIdRes) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type UpdateThreadByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Title    string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content  string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UpdateThreadByIdReq) Reset() {
	*x = UpdateThreadByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThreadByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadByIdReq) ProtoMessage() {}

func (x *UpdateThreadByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadByIdReq.ProtoReflect.Descriptor instead.
func (*UpdateThreadByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{18}
}

func (x *UpdateThreadByIdReq) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *UpdateThreadByIdReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateThreadByIdReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UpdateThreadByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Thread *Thread        `protobuf:"bytes,2,opt,name=thread,proto3" json:"thread,omitempty"`
}

func (x *UpdateThreadByIdRes) Reset() {
	*x = UpdateThreadByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThreadByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThreadByIdRes) ProtoMessage() {}

func (x *UpdateThreadByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThreadByIdRes.ProtoReflect.Descriptor instead.
func (*UpdateThreadByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{19}
}

func (x *UpdateThreadByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UpdateThreadByIdRes) GetThread() *Thread {
	if x != nil {
		return x.Thread
	}
	return nil
}

type QueryPagedThreadsByForumIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForumId  string `protobuf:"bytes,1,opt,name=forum_id,json=forumId,proto3" json:"forum_id,omitempty"`
	Page     int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *QueryPagedThreadsByForumIdReq) Reset() {
	*x = QueryPagedThreadsByForumIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedThreadsByForumIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedThreadsByForumIdReq) ProtoMessage() {}

func (x *QueryPagedThreadsByForumIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedThreadsByForumIdReq.ProtoReflect.Descriptor instead.
func (*QueryPagedThreadsByForumIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{20}
}

func (x *QueryPagedThreadsByForumIdReq) GetForumId() string {
	if x != nil {
		return x.ForumId
	}
	return ""
}

func (x *QueryPagedThreadsByForumIdReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryPagedThreadsByForumIdReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryPagedThreadsByForumIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Threads []*ThreadLite  `protobuf:"bytes,2,rep,name=threads,proto3" json:"threads,omitempty"`
}

func (x *QueryPagedThreadsByForumIdRes) Reset() {
	*x = QueryPagedThreadsByForumIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedThreadsByForumIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedThreadsByForumIdRes) ProtoMessage() {}

func (x *QueryPagedThreadsByForumIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedThreadsByForumIdRes.ProtoReflect.Descriptor instead.
func (*QueryPagedThreadsByForumIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{21}
}

func (x *QueryPagedThreadsByForumIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryPagedThreadsByForumIdRes) GetThreads() []*ThreadLite {
	if x != nil {
		return x.Threads
	}
	return nil
}

type DeleteThreadByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
}

func (x *DeleteThreadByIdReq) Reset() {
	*x = DeleteThreadByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadByIdReq) ProtoMessage() {}

func (x *DeleteThreadByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteThreadByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteThreadByIdReq) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

type DeleteThreadByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteThreadByIdRes) Reset() {
	*x = DeleteThreadByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteThreadByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteThreadByIdRes) ProtoMessage() {}

func (x *DeleteThreadByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteThreadByIdRes.ProtoReflect.Descriptor instead.
func (*DeleteThreadByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteThreadByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type CreateReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	UserId   string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title    string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Content  string `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *CreateReplyReq) Reset() {
	*x = CreateReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyReq) ProtoMessage() {}

func (x *CreateReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyReq.ProtoReflect.Descriptor instead.
func (*CreateReplyReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{24}
}

func (x *CreateReplyReq) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *CreateReplyReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateReplyReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateReplyReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type CreateReplyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Reply  *Reply         `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *CreateReplyRes) Reset() {
	*x = CreateReplyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateReplyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateReplyRes) ProtoMessage() {}

func (x *CreateReplyRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateReplyRes.ProtoReflect.Descriptor instead.
func (*CreateReplyRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{25}
}

func (x *CreateReplyRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateReplyRes) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type QueryReplyByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId string `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
}

func (x *QueryReplyByIdReq) Reset() {
	*x = QueryReplyByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReplyByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReplyByIdReq) ProtoMessage() {}

func (x *QueryReplyByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReplyByIdReq.ProtoReflect.Descriptor instead.
func (*QueryReplyByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{26}
}

func (x *QueryReplyByIdReq) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

type QueryReplyByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Reply  *Reply         `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *QueryReplyByIdRes) Reset() {
	*x = QueryReplyByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryReplyByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryReplyByIdRes) ProtoMessage() {}

func (x *QueryReplyByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryReplyByIdRes.ProtoReflect.Descriptor instead.
func (*QueryReplyByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{27}
}

func (x *QueryReplyByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryReplyByIdRes) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type UpdateReplyReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId string `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
	Title   string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content string `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *UpdateReplyReq) Reset() {
	*x = UpdateReplyReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReplyReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReplyReq) ProtoMessage() {}

func (x *UpdateReplyReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReplyReq.ProtoReflect.Descriptor instead.
func (*UpdateReplyReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{28}
}

func (x *UpdateReplyReq) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

func (x *UpdateReplyReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *UpdateReplyReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

type UpdateReplyRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Reply  *Reply         `protobuf:"bytes,2,opt,name=reply,proto3" json:"reply,omitempty"`
}

func (x *UpdateReplyRes) Reset() {
	*x = UpdateReplyRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateReplyRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateReplyRes) ProtoMessage() {}

func (x *UpdateReplyRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateReplyRes.ProtoReflect.Descriptor instead.
func (*UpdateReplyRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{29}
}

func (x *UpdateReplyRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *UpdateReplyRes) GetReply() *Reply {
	if x != nil {
		return x.Reply
	}
	return nil
}

type DeleteReplyByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReplyId string `protobuf:"bytes,1,opt,name=reply_id,json=replyId,proto3" json:"reply_id,omitempty"`
}

func (x *DeleteReplyByIdReq) Reset() {
	*x = DeleteReplyByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplyByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplyByIdReq) ProtoMessage() {}

func (x *DeleteReplyByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplyByIdReq.ProtoReflect.Descriptor instead.
func (*DeleteReplyByIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteReplyByIdReq) GetReplyId() string {
	if x != nil {
		return x.ReplyId
	}
	return ""
}

type DeleteReplyByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *DeleteReplyByIdRes) Reset() {
	*x = DeleteReplyByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteReplyByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteReplyByIdRes) ProtoMessage() {}

func (x *DeleteReplyByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteReplyByIdRes.ProtoReflect.Descriptor instead.
func (*DeleteReplyByIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteReplyByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

type QueryPagedRepliesByThreadIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThreadId string `protobuf:"bytes,1,opt,name=thread_id,json=threadId,proto3" json:"thread_id,omitempty"`
	Page     int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *QueryPagedRepliesByThreadIdReq) Reset() {
	*x = QueryPagedRepliesByThreadIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedRepliesByThreadIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedRepliesByThreadIdReq) ProtoMessage() {}

func (x *QueryPagedRepliesByThreadIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedRepliesByThreadIdReq.ProtoReflect.Descriptor instead.
func (*QueryPagedRepliesByThreadIdReq) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{32}
}

func (x *QueryPagedRepliesByThreadIdReq) GetThreadId() string {
	if x != nil {
		return x.ThreadId
	}
	return ""
}

func (x *QueryPagedRepliesByThreadIdReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryPagedRepliesByThreadIdReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryPagedRepliesByThreadIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result  *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Replies []*Reply       `protobuf:"bytes,2,rep,name=replies,proto3" json:"replies,omitempty"`
}

func (x *QueryPagedRepliesByThreadIdRes) Reset() {
	*x = QueryPagedRepliesByThreadIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_forum_forum_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedRepliesByThreadIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedRepliesByThreadIdRes) ProtoMessage() {}

func (x *QueryPagedRepliesByThreadIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_forum_forum_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedRepliesByThreadIdRes.ProtoReflect.Descriptor instead.
func (*QueryPagedRepliesByThreadIdRes) Descriptor() ([]byte, []int) {
	return file_forum_forum_proto_rawDescGZIP(), []int{33}
}

func (x *QueryPagedRepliesByThreadIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryPagedRepliesByThreadIdRes) GetReplies() []*Reply {
	if x != nil {
		return x.Replies
	}
	return nil
}

var File_forum_forum_proto protoreflect.FileDescriptor

var file_forum_forum_proto_rawDesc = []byte{
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xcd, 0x01, 0x0a, 0x05, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xe9, 0x01, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xed, 0x01, 0x0a, 0x0a,
	0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d,
	0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22, 0xe4, 0x01, 0x0a, 0x05,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x22, 0x75, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75,
	0x6d, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x11,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5c, 0x0a, 0x0e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x52, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x41,
	0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x22, 0x60, 0x0a, 0x10, 0x4c,
	0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x22, 0x2e, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x22, 0x5f, 0x0a,
	0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x7b,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b,
	0x0a, 0x11, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x60, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x22, 0x2f, 0x0a,
	0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x22, 0x3c,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x75, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x12,
	0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x60, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25,
	0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x31, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68,
	0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x63, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x62, 0x0a,
	0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x64, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52,
	0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x22, 0x6b, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x46, 0x6f,
	0x72, 0x75, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x22, 0x74, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2b, 0x0a,
	0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x69, 0x74,
	0x65, 0x52, 0x07, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x22, 0x32, 0x0a, 0x13, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x76, 0x0a,
	0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x5c, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x2e, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x79, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x11, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x22, 0x0a, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x5b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x22, 0x5c, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x05, 0x72,
	0x65, 0x70, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72,
	0x75, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x05, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x2f, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x49, 0x64,
	0x22, 0x3c, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x6e,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x70,
	0x0a, 0x1e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73,
	0x32, 0x8e, 0x09, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x12, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x52, 0x65, 0x73, 0x22, 0x00,
	0x12, 0x49, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42,
	0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x0f, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x19,
	0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72,
	0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x12, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x71,
	0x1a, 0x17, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x46, 0x6f, 0x72, 0x75, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x40, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x66, 0x6f,
	0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x49, 0x0a, 0x0f, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x42, 0x79, 0x49, 0x64, 0x12, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a,
	0x19, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x1f,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x74, 0x6c, 0x65, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x12,
	0x24, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67,
	0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d,
	0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x73, 0x42,
	0x79, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x3d, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x15, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12,
	0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12,
	0x49, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79,
	0x49, 0x64, 0x12, 0x19, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e,
	0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x0e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x49, 0x64, 0x12, 0x18, 0x2e, 0x66,
	0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42,
	0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x6d, 0x0a, 0x1b, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49,
	0x64, 0x12, 0x25, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x66, 0x6f, 0x72, 0x75, 0x6d,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x42, 0x8e, 0x01, 0x0a, 0x2b, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x6f, 0x65, 0x74, 0x61,
	0x6e, 0x67, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x66, 0x6f, 0x72, 0x75,
	0x6d, 0x42, 0x0a, 0x46, 0x6f, 0x72, 0x75, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x69, 0x64,
	0x6f, 0x6d, 0x78, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f, 0x66, 0x6f, 0x72, 0x75, 0x6d, 0xaa,
	0x02, 0x10, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_forum_forum_proto_rawDescOnce sync.Once
	file_forum_forum_proto_rawDescData = file_forum_forum_proto_rawDesc
)

func file_forum_forum_proto_rawDescGZIP() []byte {
	file_forum_forum_proto_rawDescOnce.Do(func() {
		file_forum_forum_proto_rawDescData = protoimpl.X.CompressGZIP(file_forum_forum_proto_rawDescData)
	})
	return file_forum_forum_proto_rawDescData
}

var file_forum_forum_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_forum_forum_proto_goTypes = []interface{}{
	(*Forum)(nil),                          // 0: forum.Forum
	(*Thread)(nil),                         // 1: forum.Thread
	(*ThreadLite)(nil),                     // 2: forum.ThreadLite
	(*Reply)(nil),                          // 3: forum.Reply
	(*CreateForumReq)(nil),                 // 4: forum.CreateForumReq
	(*CreateForumRes)(nil),                 // 5: forum.CreateForumRes
	(*ListAllForumsReq)(nil),               // 6: forum.ListAllForumsReq
	(*ListAllForumsRes)(nil),               // 7: forum.ListAllForumsRes
	(*QueryForumByIdReq)(nil),              // 8: forum.QueryForumByIdReq
	(*QueryForumByIdRes)(nil),              // 9: forum.QueryForumByIdRes
	(*UpdateForumByIdReq)(nil),             // 10: forum.UpdateForumByIdReq
	(*UpdateForumByIdRes)(nil),             // 11: forum.UpdateForumByIdRes
	(*DeleteForumByIdReq)(nil),             // 12: forum.DeleteForumByIdReq
	(*DeleteForumByIdRes)(nil),             // 13: forum.DeleteForumByIdRes
	(*CreateThreadReq)(nil),                // 14: forum.CreateThreadReq
	(*CreateThreadRes)(nil),                // 15: forum.CreateThreadRes
	(*QueryThreadByIdReq)(nil),             // 16: forum.QueryThreadByIdReq
	(*QueryThreadByIdRes)(nil),             // 17: forum.QueryThreadByIdRes
	(*UpdateThreadByIdReq)(nil),            // 18: forum.UpdateThreadByIdReq
	(*UpdateThreadByIdRes)(nil),            // 19: forum.UpdateThreadByIdRes
	(*QueryPagedThreadsByForumIdReq)(nil),  // 20: forum.QueryPagedThreadsByForumIdReq
	(*QueryPagedThreadsByForumIdRes)(nil),  // 21: forum.QueryPagedThreadsByForumIdRes
	(*DeleteThreadByIdReq)(nil),            // 22: forum.DeleteThreadByIdReq
	(*DeleteThreadByIdRes)(nil),            // 23: forum.DeleteThreadByIdRes
	(*CreateReplyReq)(nil),                 // 24: forum.CreateReplyReq
	(*CreateReplyRes)(nil),                 // 25: forum.CreateReplyRes
	(*QueryReplyByIdReq)(nil),              // 26: forum.QueryReplyByIdReq
	(*QueryReplyByIdRes)(nil),              // 27: forum.QueryReplyByIdRes
	(*UpdateReplyReq)(nil),                 // 28: forum.UpdateReplyReq
	(*UpdateReplyRes)(nil),                 // 29: forum.UpdateReplyRes
	(*DeleteReplyByIdReq)(nil),             // 30: forum.DeleteReplyByIdReq
	(*DeleteReplyByIdRes)(nil),             // 31: forum.DeleteReplyByIdRes
	(*QueryPagedRepliesByThreadIdReq)(nil), // 32: forum.QueryPagedRepliesByThreadIdReq
	(*QueryPagedRepliesByThreadIdRes)(nil), // 33: forum.QueryPagedRepliesByThreadIdRes
	(*shared.Result)(nil),                  // 34: shared.Result
}
var file_forum_forum_proto_depIdxs = []int32{
	34, // 0: forum.CreateForumRes.result:type_name -> shared.Result
	0,  // 1: forum.CreateForumRes.forum:type_name -> forum.Forum
	34, // 2: forum.ListAllForumsRes.result:type_name -> shared.Result
	0,  // 3: forum.ListAllForumsRes.forums:type_name -> forum.Forum
	34, // 4: forum.QueryForumByIdRes.result:type_name -> shared.Result
	0,  // 5: forum.QueryForumByIdRes.forum:type_name -> forum.Forum
	34, // 6: forum.UpdateForumByIdRes.result:type_name -> shared.Result
	0,  // 7: forum.UpdateForumByIdRes.forum:type_name -> forum.Forum
	34, // 8: forum.DeleteForumByIdRes.result:type_name -> shared.Result
	34, // 9: forum.CreateThreadRes.result:type_name -> shared.Result
	1,  // 10: forum.CreateThreadRes.thread:type_name -> forum.Thread
	34, // 11: forum.QueryThreadByIdRes.result:type_name -> shared.Result
	1,  // 12: forum.QueryThreadByIdRes.thread:type_name -> forum.Thread
	34, // 13: forum.UpdateThreadByIdRes.result:type_name -> shared.Result
	1,  // 14: forum.UpdateThreadByIdRes.thread:type_name -> forum.Thread
	34, // 15: forum.QueryPagedThreadsByForumIdRes.result:type_name -> shared.Result
	2,  // 16: forum.QueryPagedThreadsByForumIdRes.threads:type_name -> forum.ThreadLite
	34, // 17: forum.DeleteThreadByIdRes.result:type_name -> shared.Result
	34, // 18: forum.CreateReplyRes.result:type_name -> shared.Result
	3,  // 19: forum.CreateReplyRes.reply:type_name -> forum.Reply
	34, // 20: forum.QueryReplyByIdRes.result:type_name -> shared.Result
	3,  // 21: forum.QueryReplyByIdRes.reply:type_name -> forum.Reply
	34, // 22: forum.UpdateReplyRes.result:type_name -> shared.Result
	3,  // 23: forum.UpdateReplyRes.reply:type_name -> forum.Reply
	34, // 24: forum.DeleteReplyByIdRes.result:type_name -> shared.Result
	34, // 25: forum.QueryPagedRepliesByThreadIdRes.result:type_name -> shared.Result
	3,  // 26: forum.QueryPagedRepliesByThreadIdRes.replies:type_name -> forum.Reply
	4,  // 27: forum.ForumService.CreateForum:input_type -> forum.CreateForumReq
	10, // 28: forum.ForumService.UpdateForumById:input_type -> forum.UpdateForumByIdReq
	12, // 29: forum.ForumService.DeleteForumById:input_type -> forum.DeleteForumByIdReq
	6,  // 30: forum.ForumService.ListAllForums:input_type -> forum.ListAllForumsReq
	8,  // 31: forum.ForumService.QueryForumById:input_type -> forum.QueryForumByIdReq
	14, // 32: forum.ForumService.CreateThread:input_type -> forum.CreateThreadReq
	18, // 33: forum.ForumService.UpdateThreadById:input_type -> forum.UpdateThreadByIdReq
	22, // 34: forum.ForumService.DeleteThreadById:input_type -> forum.DeleteThreadByIdReq
	16, // 35: forum.ForumService.QueryThreadById:input_type -> forum.QueryThreadByIdReq
	20, // 36: forum.ForumService.QueryPagedThreadTitlesByForumId:input_type -> forum.QueryPagedThreadsByForumIdReq
	24, // 37: forum.ForumService.CreateReply:input_type -> forum.CreateReplyReq
	28, // 38: forum.ForumService.UpdateReplyById:input_type -> forum.UpdateReplyReq
	30, // 39: forum.ForumService.DeleteReplyById:input_type -> forum.DeleteReplyByIdReq
	26, // 40: forum.ForumService.QueryReplyById:input_type -> forum.QueryReplyByIdReq
	32, // 41: forum.ForumService.QueryPagedRepliesByThreadId:input_type -> forum.QueryPagedRepliesByThreadIdReq
	5,  // 42: forum.ForumService.CreateForum:output_type -> forum.CreateForumRes
	11, // 43: forum.ForumService.UpdateForumById:output_type -> forum.UpdateForumByIdRes
	13, // 44: forum.ForumService.DeleteForumById:output_type -> forum.DeleteForumByIdRes
	7,  // 45: forum.ForumService.ListAllForums:output_type -> forum.ListAllForumsRes
	9,  // 46: forum.ForumService.QueryForumById:output_type -> forum.QueryForumByIdRes
	15, // 47: forum.ForumService.CreateThread:output_type -> forum.CreateThreadRes
	19, // 48: forum.ForumService.UpdateThreadById:output_type -> forum.UpdateThreadByIdRes
	23, // 49: forum.ForumService.DeleteThreadById:output_type -> forum.DeleteThreadByIdRes
	17, // 50: forum.ForumService.QueryThreadById:output_type -> forum.QueryThreadByIdRes
	21, // 51: forum.ForumService.QueryPagedThreadTitlesByForumId:output_type -> forum.QueryPagedThreadsByForumIdRes
	25, // 52: forum.ForumService.CreateReply:output_type -> forum.CreateReplyRes
	29, // 53: forum.ForumService.UpdateReplyById:output_type -> forum.UpdateReplyRes
	31, // 54: forum.ForumService.DeleteReplyById:output_type -> forum.DeleteReplyByIdRes
	27, // 55: forum.ForumService.QueryReplyById:output_type -> forum.QueryReplyByIdRes
	33, // 56: forum.ForumService.QueryPagedRepliesByThreadId:output_type -> forum.QueryPagedRepliesByThreadIdRes
	42, // [42:57] is the sub-list for method output_type
	27, // [27:42] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_forum_forum_proto_init() }
func file_forum_forum_proto_init() {
	if File_forum_forum_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_forum_forum_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Forum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ThreadLite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForumReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateForumRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllForumsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListAllForumsRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryForumByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryForumByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateForumByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateForumByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForumByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteForumByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateThreadRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryThreadByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryThreadByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThreadByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThreadByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedThreadsByForumIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedThreadsByForumIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteThreadByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateReplyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReplyByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryReplyByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReplyReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateReplyRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplyByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteReplyByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedRepliesByThreadIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_forum_forum_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedRepliesByThreadIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_forum_forum_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_forum_forum_proto_goTypes,
		DependencyIndexes: file_forum_forum_proto_depIdxs,
		MessageInfos:      file_forum_forum_proto_msgTypes,
	}.Build()
	File_forum_forum_proto = out.File
	file_forum_forum_proto_rawDesc = nil
	file_forum_forum_proto_goTypes = nil
	file_forum_forum_proto_depIdxs = nil
}
