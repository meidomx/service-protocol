// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.3
// source: countdown/countdown.proto

package countdown

import (
	shared "github.com/meidomx/service-protocol/protocol/protobuf/go/shared"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CountdownExpireStatus int32

const (
	CountdownExpireStatus_UNKNOWN  CountdownExpireStatus = 0
	CountdownExpireStatus_EXPIRING CountdownExpireStatus = 1
	CountdownExpireStatus_EXPIRED  CountdownExpireStatus = 2
	CountdownExpireStatus_DELETED  CountdownExpireStatus = 3
	CountdownExpireStatus_ALL      CountdownExpireStatus = 127
)

// Enum value maps for CountdownExpireStatus.
var (
	CountdownExpireStatus_name = map[int32]string{
		0:   "UNKNOWN",
		1:   "EXPIRING",
		2:   "EXPIRED",
		3:   "DELETED",
		127: "ALL",
	}
	CountdownExpireStatus_value = map[string]int32{
		"UNKNOWN":  0,
		"EXPIRING": 1,
		"EXPIRED":  2,
		"DELETED":  3,
		"ALL":      127,
	}
)

func (x CountdownExpireStatus) Enum() *CountdownExpireStatus {
	p := new(CountdownExpireStatus)
	*p = x
	return p
}

func (x CountdownExpireStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CountdownExpireStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_countdown_countdown_proto_enumTypes[0].Descriptor()
}

func (CountdownExpireStatus) Type() protoreflect.EnumType {
	return &file_countdown_countdown_proto_enumTypes[0]
}

func (x CountdownExpireStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CountdownExpireStatus.Descriptor instead.
func (CountdownExpireStatus) EnumDescriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{0}
}

type Countdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountdownId    string `protobuf:"bytes,1,opt,name=countdown_id,json=countdownId,proto3" json:"countdown_id,omitempty"`
	UserId         string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CountdownType  string `protobuf:"bytes,3,opt,name=countdown_type,json=countdownType,proto3" json:"countdown_type,omitempty"`
	Title          string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Content        string `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	TimeExpired    int64  `protobuf:"varint,21,opt,name=time_expired,json=timeExpired,proto3" json:"time_expired,omitempty"`
	TimeLastHandle int64  `protobuf:"varint,22,opt,name=time_last_handle,json=timeLastHandle,proto3" json:"time_last_handle,omitempty"`
	TimeCreated    int64  `protobuf:"varint,23,opt,name=time_created,json=timeCreated,proto3" json:"time_created,omitempty"`
	TimeUpdated    int64  `protobuf:"varint,24,opt,name=time_updated,json=timeUpdated,proto3" json:"time_updated,omitempty"`
}

func (x *Countdown) Reset() {
	*x = Countdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Countdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Countdown) ProtoMessage() {}

func (x *Countdown) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Countdown.ProtoReflect.Descriptor instead.
func (*Countdown) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{0}
}

func (x *Countdown) GetCountdownId() string {
	if x != nil {
		return x.CountdownId
	}
	return ""
}

func (x *Countdown) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Countdown) GetCountdownType() string {
	if x != nil {
		return x.CountdownType
	}
	return ""
}

func (x *Countdown) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Countdown) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Countdown) GetTimeExpired() int64 {
	if x != nil {
		return x.TimeExpired
	}
	return 0
}

func (x *Countdown) GetTimeLastHandle() int64 {
	if x != nil {
		return x.TimeLastHandle
	}
	return 0
}

func (x *Countdown) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *Countdown) GetTimeUpdated() int64 {
	if x != nil {
		return x.TimeUpdated
	}
	return 0
}

type CreateCountdownReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	CountdownType string `protobuf:"bytes,2,opt,name=countdown_type,json=countdownType,proto3" json:"countdown_type,omitempty"`
	Title         string `protobuf:"bytes,11,opt,name=title,proto3" json:"title,omitempty"`
	Content       string `protobuf:"bytes,12,opt,name=content,proto3" json:"content,omitempty"`
	TimeExpired   int64  `protobuf:"varint,21,opt,name=time_expired,json=timeExpired,proto3" json:"time_expired,omitempty"`
}

func (x *CreateCountdownReq) Reset() {
	*x = CreateCountdownReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCountdownReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCountdownReq) ProtoMessage() {}

func (x *CreateCountdownReq) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCountdownReq.ProtoReflect.Descriptor instead.
func (*CreateCountdownReq) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCountdownReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CreateCountdownReq) GetCountdownType() string {
	if x != nil {
		return x.CountdownType
	}
	return ""
}

func (x *CreateCountdownReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateCountdownReq) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateCountdownReq) GetTimeExpired() int64 {
	if x != nil {
		return x.TimeExpired
	}
	return 0
}

type CreateCountdownRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Countdown *Countdown     `protobuf:"bytes,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *CreateCountdownRes) Reset() {
	*x = CreateCountdownRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCountdownRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCountdownRes) ProtoMessage() {}

func (x *CreateCountdownRes) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCountdownRes.ProtoReflect.Descriptor instead.
func (*CreateCountdownRes) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCountdownRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *CreateCountdownRes) GetCountdown() *Countdown {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type QueryCountdownByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountdownId string `protobuf:"bytes,1,opt,name=countdown_id,json=countdownId,proto3" json:"countdown_id,omitempty"`
}

func (x *QueryCountdownByIdReq) Reset() {
	*x = QueryCountdownByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCountdownByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCountdownByIdReq) ProtoMessage() {}

func (x *QueryCountdownByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCountdownByIdReq.ProtoReflect.Descriptor instead.
func (*QueryCountdownByIdReq) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{3}
}

func (x *QueryCountdownByIdReq) GetCountdownId() string {
	if x != nil {
		return x.CountdownId
	}
	return ""
}

type QueryCountdownByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Countdown *Countdown     `protobuf:"bytes,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *QueryCountdownByIdRes) Reset() {
	*x = QueryCountdownByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryCountdownByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryCountdownByIdRes) ProtoMessage() {}

func (x *QueryCountdownByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryCountdownByIdRes.ProtoReflect.Descriptor instead.
func (*QueryCountdownByIdRes) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{4}
}

func (x *QueryCountdownByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryCountdownByIdRes) GetCountdown() *Countdown {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type NextCountdownIntervalByIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountdownId string `protobuf:"bytes,1,opt,name=countdown_id,json=countdownId,proto3" json:"countdown_id,omitempty"`
	TimeExpired int64  `protobuf:"varint,2,opt,name=time_expired,json=timeExpired,proto3" json:"time_expired,omitempty"`
}

func (x *NextCountdownIntervalByIdReq) Reset() {
	*x = NextCountdownIntervalByIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextCountdownIntervalByIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextCountdownIntervalByIdReq) ProtoMessage() {}

func (x *NextCountdownIntervalByIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextCountdownIntervalByIdReq.ProtoReflect.Descriptor instead.
func (*NextCountdownIntervalByIdReq) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{5}
}

func (x *NextCountdownIntervalByIdReq) GetCountdownId() string {
	if x != nil {
		return x.CountdownId
	}
	return ""
}

func (x *NextCountdownIntervalByIdReq) GetTimeExpired() int64 {
	if x != nil {
		return x.TimeExpired
	}
	return 0
}

type NextCountdownIntervalByIdRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result    *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Countdown *Countdown     `protobuf:"bytes,2,opt,name=countdown,proto3" json:"countdown,omitempty"`
}

func (x *NextCountdownIntervalByIdRes) Reset() {
	*x = NextCountdownIntervalByIdRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextCountdownIntervalByIdRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextCountdownIntervalByIdRes) ProtoMessage() {}

func (x *NextCountdownIntervalByIdRes) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextCountdownIntervalByIdRes.ProtoReflect.Descriptor instead.
func (*NextCountdownIntervalByIdRes) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{6}
}

func (x *NextCountdownIntervalByIdRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *NextCountdownIntervalByIdRes) GetCountdown() *Countdown {
	if x != nil {
		return x.Countdown
	}
	return nil
}

type QueryPagedExpringCountdownsByTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountdownType string `protobuf:"bytes,1,opt,name=countdown_type,json=countdownType,proto3" json:"countdown_type,omitempty"`
	Page          int64  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int64  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
}

func (x *QueryPagedExpringCountdownsByTypeReq) Reset() {
	*x = QueryPagedExpringCountdownsByTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedExpringCountdownsByTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedExpringCountdownsByTypeReq) ProtoMessage() {}

func (x *QueryPagedExpringCountdownsByTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedExpringCountdownsByTypeReq.ProtoReflect.Descriptor instead.
func (*QueryPagedExpringCountdownsByTypeReq) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{7}
}

func (x *QueryPagedExpringCountdownsByTypeReq) GetCountdownType() string {
	if x != nil {
		return x.CountdownType
	}
	return ""
}

func (x *QueryPagedExpringCountdownsByTypeReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryPagedExpringCountdownsByTypeReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type QueryPagedExpringCountdownsByTypeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Countdowns []*Countdown   `protobuf:"bytes,2,rep,name=countdowns,proto3" json:"countdowns,omitempty"`
}

func (x *QueryPagedExpringCountdownsByTypeRes) Reset() {
	*x = QueryPagedExpringCountdownsByTypeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedExpringCountdownsByTypeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedExpringCountdownsByTypeRes) ProtoMessage() {}

func (x *QueryPagedExpringCountdownsByTypeRes) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedExpringCountdownsByTypeRes.ProtoReflect.Descriptor instead.
func (*QueryPagedExpringCountdownsByTypeRes) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{8}
}

func (x *QueryPagedExpringCountdownsByTypeRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryPagedExpringCountdownsByTypeRes) GetCountdowns() []*Countdown {
	if x != nil {
		return x.Countdowns
	}
	return nil
}

type QueryPagedCountdownsByTypeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CountdownType string                `protobuf:"bytes,1,opt,name=countdown_type,json=countdownType,proto3" json:"countdown_type,omitempty"`
	Page          int64                 `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`
	PageSize      int64                 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	ExpireStatus  CountdownExpireStatus `protobuf:"varint,4,opt,name=expire_status,json=expireStatus,proto3,enum=countdown.CountdownExpireStatus" json:"expire_status,omitempty"`
}

func (x *QueryPagedCountdownsByTypeReq) Reset() {
	*x = QueryPagedCountdownsByTypeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedCountdownsByTypeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedCountdownsByTypeReq) ProtoMessage() {}

func (x *QueryPagedCountdownsByTypeReq) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedCountdownsByTypeReq.ProtoReflect.Descriptor instead.
func (*QueryPagedCountdownsByTypeReq) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{9}
}

func (x *QueryPagedCountdownsByTypeReq) GetCountdownType() string {
	if x != nil {
		return x.CountdownType
	}
	return ""
}

func (x *QueryPagedCountdownsByTypeReq) GetPage() int64 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *QueryPagedCountdownsByTypeReq) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *QueryPagedCountdownsByTypeReq) GetExpireStatus() CountdownExpireStatus {
	if x != nil {
		return x.ExpireStatus
	}
	return CountdownExpireStatus_UNKNOWN
}

type QueryPagedCountdownsByTypeRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result     *shared.Result `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	Countdowns []*Countdown   `protobuf:"bytes,2,rep,name=countdowns,proto3" json:"countdowns,omitempty"`
}

func (x *QueryPagedCountdownsByTypeRes) Reset() {
	*x = QueryPagedCountdownsByTypeRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_countdown_countdown_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryPagedCountdownsByTypeRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryPagedCountdownsByTypeRes) ProtoMessage() {}

func (x *QueryPagedCountdownsByTypeRes) ProtoReflect() protoreflect.Message {
	mi := &file_countdown_countdown_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryPagedCountdownsByTypeRes.ProtoReflect.Descriptor instead.
func (*QueryPagedCountdownsByTypeRes) Descriptor() ([]byte, []int) {
	return file_countdown_countdown_proto_rawDescGZIP(), []int{10}
}

func (x *QueryPagedCountdownsByTypeRes) GetResult() *shared.Result {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *QueryPagedCountdownsByTypeRes) GetCountdowns() []*Countdown {
	if x != nil {
		return x.Countdowns
	}
	return nil
}

var File_countdown_countdown_proto protoreflect.FileDescriptor

var file_countdown_countdown_proto_rawDesc = []byte{
	0x0a, 0x19, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x1a, 0x13, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x02, 0x0a, 0x09,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x4c,
	0x61, 0x73, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x74, 0x69, 0x6d, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x69, 0x6d, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x22,
	0xa7, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x22, 0x70, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x12,
	0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x3a, 0x0a, 0x15, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x15, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77,
	0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x64, 0x0a, 0x1c,
	0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x21, 0x0a, 0x0c,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x64, 0x12,
	0x21, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x7a, 0x0a, 0x1c, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52,
	0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x09, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x22, 0x7e,
	0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72,
	0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x84,
	0x01, 0x0a, 0x24, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x45, 0x0a, 0x0d, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0c, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x7d, 0x0a, 0x1d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50,
	0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12,
	0x34, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x73, 0x2a, 0x55, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45,
	0x58, 0x50, 0x49, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x7f, 0x32, 0xb0, 0x04, 0x0a,
	0x10, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x51, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x73, 0x22, 0x00, 0x12, 0x6f, 0x0a, 0x19, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x49,
	0x64, 0x12, 0x27, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x65,
	0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x4e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x42, 0x79, 0x49, 0x64,
	0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x5a, 0x0a, 0x12, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x12, 0x20, 0x2e, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x22,
	0x00, 0x12, 0x87, 0x01, 0x0a, 0x21, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x45, 0x78, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e,
	0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42,
	0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x2f, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x45,
	0x78, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73,
	0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x12, 0x72, 0x0a, 0x1a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f,
	0x77, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x61, 0x67, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x73, 0x42, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x73, 0x22, 0x00, 0x42,
	0x9a, 0x01, 0x0a, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x6d, 0x6f, 0x65, 0x74, 0x61, 0x6e, 0x67,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64,
	0x6f, 0x77, 0x6e, 0x42, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x65, 0x69, 0x64, 0x6f, 0x6d, 0x78, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x64, 0x6f, 0x77, 0x6e, 0xaa, 0x02, 0x10, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x47, 0x72, 0x70, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_countdown_countdown_proto_rawDescOnce sync.Once
	file_countdown_countdown_proto_rawDescData = file_countdown_countdown_proto_rawDesc
)

func file_countdown_countdown_proto_rawDescGZIP() []byte {
	file_countdown_countdown_proto_rawDescOnce.Do(func() {
		file_countdown_countdown_proto_rawDescData = protoimpl.X.CompressGZIP(file_countdown_countdown_proto_rawDescData)
	})
	return file_countdown_countdown_proto_rawDescData
}

var file_countdown_countdown_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_countdown_countdown_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_countdown_countdown_proto_goTypes = []interface{}{
	(CountdownExpireStatus)(0),                   // 0: countdown.CountdownExpireStatus
	(*Countdown)(nil),                            // 1: countdown.Countdown
	(*CreateCountdownReq)(nil),                   // 2: countdown.CreateCountdownReq
	(*CreateCountdownRes)(nil),                   // 3: countdown.CreateCountdownRes
	(*QueryCountdownByIdReq)(nil),                // 4: countdown.QueryCountdownByIdReq
	(*QueryCountdownByIdRes)(nil),                // 5: countdown.QueryCountdownByIdRes
	(*NextCountdownIntervalByIdReq)(nil),         // 6: countdown.NextCountdownIntervalByIdReq
	(*NextCountdownIntervalByIdRes)(nil),         // 7: countdown.NextCountdownIntervalByIdRes
	(*QueryPagedExpringCountdownsByTypeReq)(nil), // 8: countdown.QueryPagedExpringCountdownsByTypeReq
	(*QueryPagedExpringCountdownsByTypeRes)(nil), // 9: countdown.QueryPagedExpringCountdownsByTypeRes
	(*QueryPagedCountdownsByTypeReq)(nil),        // 10: countdown.QueryPagedCountdownsByTypeReq
	(*QueryPagedCountdownsByTypeRes)(nil),        // 11: countdown.QueryPagedCountdownsByTypeRes
	(*shared.Result)(nil),                        // 12: shared.Result
}
var file_countdown_countdown_proto_depIdxs = []int32{
	12, // 0: countdown.CreateCountdownRes.result:type_name -> shared.Result
	1,  // 1: countdown.CreateCountdownRes.countdown:type_name -> countdown.Countdown
	12, // 2: countdown.QueryCountdownByIdRes.result:type_name -> shared.Result
	1,  // 3: countdown.QueryCountdownByIdRes.countdown:type_name -> countdown.Countdown
	12, // 4: countdown.NextCountdownIntervalByIdRes.result:type_name -> shared.Result
	1,  // 5: countdown.NextCountdownIntervalByIdRes.countdown:type_name -> countdown.Countdown
	12, // 6: countdown.QueryPagedExpringCountdownsByTypeRes.result:type_name -> shared.Result
	1,  // 7: countdown.QueryPagedExpringCountdownsByTypeRes.countdowns:type_name -> countdown.Countdown
	0,  // 8: countdown.QueryPagedCountdownsByTypeReq.expire_status:type_name -> countdown.CountdownExpireStatus
	12, // 9: countdown.QueryPagedCountdownsByTypeRes.result:type_name -> shared.Result
	1,  // 10: countdown.QueryPagedCountdownsByTypeRes.countdowns:type_name -> countdown.Countdown
	2,  // 11: countdown.CountdownService.CreateCountdown:input_type -> countdown.CreateCountdownReq
	6,  // 12: countdown.CountdownService.NextCountdownIntervalById:input_type -> countdown.NextCountdownIntervalByIdReq
	4,  // 13: countdown.CountdownService.QueryCountdownById:input_type -> countdown.QueryCountdownByIdReq
	8,  // 14: countdown.CountdownService.QueryPagedExpringCountdownsByType:input_type -> countdown.QueryPagedExpringCountdownsByTypeReq
	10, // 15: countdown.CountdownService.QueryPagedCountdownsByType:input_type -> countdown.QueryPagedCountdownsByTypeReq
	3,  // 16: countdown.CountdownService.CreateCountdown:output_type -> countdown.CreateCountdownRes
	7,  // 17: countdown.CountdownService.NextCountdownIntervalById:output_type -> countdown.NextCountdownIntervalByIdRes
	5,  // 18: countdown.CountdownService.QueryCountdownById:output_type -> countdown.QueryCountdownByIdRes
	9,  // 19: countdown.CountdownService.QueryPagedExpringCountdownsByType:output_type -> countdown.QueryPagedExpringCountdownsByTypeRes
	11, // 20: countdown.CountdownService.QueryPagedCountdownsByType:output_type -> countdown.QueryPagedCountdownsByTypeRes
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_countdown_countdown_proto_init() }
func file_countdown_countdown_proto_init() {
	if File_countdown_countdown_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_countdown_countdown_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Countdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCountdownReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCountdownRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCountdownByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryCountdownByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextCountdownIntervalByIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextCountdownIntervalByIdRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedExpringCountdownsByTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedExpringCountdownsByTypeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedCountdownsByTypeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_countdown_countdown_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryPagedCountdownsByTypeRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_countdown_countdown_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_countdown_countdown_proto_goTypes,
		DependencyIndexes: file_countdown_countdown_proto_depIdxs,
		EnumInfos:         file_countdown_countdown_proto_enumTypes,
		MessageInfos:      file_countdown_countdown_proto_msgTypes,
	}.Build()
	File_countdown_countdown_proto = out.File
	file_countdown_countdown_proto_rawDesc = nil
	file_countdown_countdown_proto_goTypes = nil
	file_countdown_countdown_proto_depIdxs = nil
}
