// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package keeptrack2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Keeptrack2ServiceClient is the client API for Keeptrack2Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Keeptrack2ServiceClient interface {
	CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error)
	DeleteProjectById(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRes, error)
	UpdateProjectById(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRes, error)
	QueryProjectById(ctx context.Context, in *QueryProjectByIdReq, opts ...grpc.CallOption) (*QueryProjectByIdRes, error)
	QueryAllProjects(ctx context.Context, in *QueryAllProjectsReq, opts ...grpc.CallOption) (*QueryAllProjectsRes, error)
	CreateItem(ctx context.Context, in *CreateItemReq, opts ...grpc.CallOption) (*CreateItemRes, error)
	DeleteItemById(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemRes, error)
	UpdateItemById(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error)
	QueryAvailableItemById(ctx context.Context, in *QueryItemByIdReq, opts ...grpc.CallOption) (*QueryItemByIdRes, error)
	QueryPagedAvailableItems(ctx context.Context, in *QueryPagedAvailableItemsReq, opts ...grpc.CallOption) (*QueryPagedAvailableItemsRes, error)
	CreatePart(ctx context.Context, in *CreatePartReq, opts ...grpc.CallOption) (*CreatePartRes, error)
	DeletePartById(ctx context.Context, in *DeletePartReq, opts ...grpc.CallOption) (*DeletePartRes, error)
	UpdatePartById(ctx context.Context, in *UpdatePartReq, opts ...grpc.CallOption) (*UpdatePartRes, error)
	UpdatePartStatusById(ctx context.Context, in *UpdatePartStatusByIdReq, opts ...grpc.CallOption) (*UpdatePartStatusByIdRes, error)
	QueryAvailablePartById(ctx context.Context, in *QueryPartByIdReq, opts ...grpc.CallOption) (*QueryPartByIdRes, error)
	QueryPagedAvailableParts(ctx context.Context, in *QueryPagedAvailablePartsReq, opts ...grpc.CallOption) (*QueryPagedAvailablePartsRes, error)
}

type keeptrack2ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeeptrack2ServiceClient(cc grpc.ClientConnInterface) Keeptrack2ServiceClient {
	return &keeptrack2ServiceClient{cc}
}

func (c *keeptrack2ServiceClient) CreateProject(ctx context.Context, in *CreateProjectReq, opts ...grpc.CallOption) (*CreateProjectRes, error) {
	out := new(CreateProjectRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) DeleteProjectById(ctx context.Context, in *DeleteProjectReq, opts ...grpc.CallOption) (*DeleteProjectRes, error) {
	out := new(DeleteProjectRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/DeleteProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) UpdateProjectById(ctx context.Context, in *UpdateProjectReq, opts ...grpc.CallOption) (*UpdateProjectRes, error) {
	out := new(UpdateProjectRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/UpdateProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryProjectById(ctx context.Context, in *QueryProjectByIdReq, opts ...grpc.CallOption) (*QueryProjectByIdRes, error) {
	out := new(QueryProjectByIdRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryProjectById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryAllProjects(ctx context.Context, in *QueryAllProjectsReq, opts ...grpc.CallOption) (*QueryAllProjectsRes, error) {
	out := new(QueryAllProjectsRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryAllProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) CreateItem(ctx context.Context, in *CreateItemReq, opts ...grpc.CallOption) (*CreateItemRes, error) {
	out := new(CreateItemRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/CreateItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) DeleteItemById(ctx context.Context, in *DeleteItemReq, opts ...grpc.CallOption) (*DeleteItemRes, error) {
	out := new(DeleteItemRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/DeleteItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) UpdateItemById(ctx context.Context, in *UpdateItemReq, opts ...grpc.CallOption) (*UpdateItemRes, error) {
	out := new(UpdateItemRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/UpdateItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryAvailableItemById(ctx context.Context, in *QueryItemByIdReq, opts ...grpc.CallOption) (*QueryItemByIdRes, error) {
	out := new(QueryItemByIdRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryAvailableItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryPagedAvailableItems(ctx context.Context, in *QueryPagedAvailableItemsReq, opts ...grpc.CallOption) (*QueryPagedAvailableItemsRes, error) {
	out := new(QueryPagedAvailableItemsRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryPagedAvailableItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) CreatePart(ctx context.Context, in *CreatePartReq, opts ...grpc.CallOption) (*CreatePartRes, error) {
	out := new(CreatePartRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/CreatePart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) DeletePartById(ctx context.Context, in *DeletePartReq, opts ...grpc.CallOption) (*DeletePartRes, error) {
	out := new(DeletePartRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/DeletePartById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) UpdatePartById(ctx context.Context, in *UpdatePartReq, opts ...grpc.CallOption) (*UpdatePartRes, error) {
	out := new(UpdatePartRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/UpdatePartById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) UpdatePartStatusById(ctx context.Context, in *UpdatePartStatusByIdReq, opts ...grpc.CallOption) (*UpdatePartStatusByIdRes, error) {
	out := new(UpdatePartStatusByIdRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/UpdatePartStatusById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryAvailablePartById(ctx context.Context, in *QueryPartByIdReq, opts ...grpc.CallOption) (*QueryPartByIdRes, error) {
	out := new(QueryPartByIdRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryAvailablePartById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keeptrack2ServiceClient) QueryPagedAvailableParts(ctx context.Context, in *QueryPagedAvailablePartsReq, opts ...grpc.CallOption) (*QueryPagedAvailablePartsRes, error) {
	out := new(QueryPagedAvailablePartsRes)
	err := c.cc.Invoke(ctx, "/keeptrack2.Keeptrack2Service/QueryPagedAvailableParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Keeptrack2ServiceServer is the server API for Keeptrack2Service service.
// All implementations must embed UnimplementedKeeptrack2ServiceServer
// for forward compatibility
type Keeptrack2ServiceServer interface {
	CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error)
	DeleteProjectById(context.Context, *DeleteProjectReq) (*DeleteProjectRes, error)
	UpdateProjectById(context.Context, *UpdateProjectReq) (*UpdateProjectRes, error)
	QueryProjectById(context.Context, *QueryProjectByIdReq) (*QueryProjectByIdRes, error)
	QueryAllProjects(context.Context, *QueryAllProjectsReq) (*QueryAllProjectsRes, error)
	CreateItem(context.Context, *CreateItemReq) (*CreateItemRes, error)
	DeleteItemById(context.Context, *DeleteItemReq) (*DeleteItemRes, error)
	UpdateItemById(context.Context, *UpdateItemReq) (*UpdateItemRes, error)
	QueryAvailableItemById(context.Context, *QueryItemByIdReq) (*QueryItemByIdRes, error)
	QueryPagedAvailableItems(context.Context, *QueryPagedAvailableItemsReq) (*QueryPagedAvailableItemsRes, error)
	CreatePart(context.Context, *CreatePartReq) (*CreatePartRes, error)
	DeletePartById(context.Context, *DeletePartReq) (*DeletePartRes, error)
	UpdatePartById(context.Context, *UpdatePartReq) (*UpdatePartRes, error)
	UpdatePartStatusById(context.Context, *UpdatePartStatusByIdReq) (*UpdatePartStatusByIdRes, error)
	QueryAvailablePartById(context.Context, *QueryPartByIdReq) (*QueryPartByIdRes, error)
	QueryPagedAvailableParts(context.Context, *QueryPagedAvailablePartsReq) (*QueryPagedAvailablePartsRes, error)
	mustEmbedUnimplementedKeeptrack2ServiceServer()
}

// UnimplementedKeeptrack2ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKeeptrack2ServiceServer struct {
}

func (UnimplementedKeeptrack2ServiceServer) CreateProject(context.Context, *CreateProjectReq) (*CreateProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) DeleteProjectById(context.Context, *DeleteProjectReq) (*DeleteProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProjectById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) UpdateProjectById(context.Context, *UpdateProjectReq) (*UpdateProjectRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryProjectById(context.Context, *QueryProjectByIdReq) (*QueryProjectByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryProjectById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryAllProjects(context.Context, *QueryAllProjectsReq) (*QueryAllProjectsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAllProjects not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) CreateItem(context.Context, *CreateItemReq) (*CreateItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) DeleteItemById(context.Context, *DeleteItemReq) (*DeleteItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItemById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) UpdateItemById(context.Context, *UpdateItemReq) (*UpdateItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItemById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryAvailableItemById(context.Context, *QueryItemByIdReq) (*QueryItemByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailableItemById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryPagedAvailableItems(context.Context, *QueryPagedAvailableItemsReq) (*QueryPagedAvailableItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPagedAvailableItems not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) CreatePart(context.Context, *CreatePartReq) (*CreatePartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePart not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) DeletePartById(context.Context, *DeletePartReq) (*DeletePartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePartById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) UpdatePartById(context.Context, *UpdatePartReq) (*UpdatePartRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) UpdatePartStatusById(context.Context, *UpdatePartStatusByIdReq) (*UpdatePartStatusByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePartStatusById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryAvailablePartById(context.Context, *QueryPartByIdReq) (*QueryPartByIdRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryAvailablePartById not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) QueryPagedAvailableParts(context.Context, *QueryPagedAvailablePartsReq) (*QueryPagedAvailablePartsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryPagedAvailableParts not implemented")
}
func (UnimplementedKeeptrack2ServiceServer) mustEmbedUnimplementedKeeptrack2ServiceServer() {}

// UnsafeKeeptrack2ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Keeptrack2ServiceServer will
// result in compilation errors.
type UnsafeKeeptrack2ServiceServer interface {
	mustEmbedUnimplementedKeeptrack2ServiceServer()
}

func RegisterKeeptrack2ServiceServer(s grpc.ServiceRegistrar, srv Keeptrack2ServiceServer) {
	s.RegisterService(&Keeptrack2Service_ServiceDesc, srv)
}

func _Keeptrack2Service_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).CreateProject(ctx, req.(*CreateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_DeleteProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).DeleteProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/DeleteProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).DeleteProjectById(ctx, req.(*DeleteProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_UpdateProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).UpdateProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/UpdateProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).UpdateProjectById(ctx, req.(*UpdateProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProjectByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryProjectById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryProjectById(ctx, req.(*QueryProjectByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryAllProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProjectsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryAllProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryAllProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryAllProjects(ctx, req.(*QueryAllProjectsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/CreateItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).CreateItem(ctx, req.(*CreateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_DeleteItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).DeleteItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/DeleteItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).DeleteItemById(ctx, req.(*DeleteItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_UpdateItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).UpdateItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/UpdateItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).UpdateItemById(ctx, req.(*UpdateItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryAvailableItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryItemByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryAvailableItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryAvailableItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryAvailableItemById(ctx, req.(*QueryItemByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryPagedAvailableItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPagedAvailableItemsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryPagedAvailableItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryPagedAvailableItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryPagedAvailableItems(ctx, req.(*QueryPagedAvailableItemsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_CreatePart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).CreatePart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/CreatePart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).CreatePart(ctx, req.(*CreatePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_DeletePartById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).DeletePartById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/DeletePartById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).DeletePartById(ctx, req.(*DeletePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_UpdatePartById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).UpdatePartById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/UpdatePartById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).UpdatePartById(ctx, req.(*UpdatePartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_UpdatePartStatusById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePartStatusByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).UpdatePartStatusById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/UpdatePartStatusById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).UpdatePartStatusById(ctx, req.(*UpdatePartStatusByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryAvailablePartById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPartByIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryAvailablePartById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryAvailablePartById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryAvailablePartById(ctx, req.(*QueryPartByIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Keeptrack2Service_QueryPagedAvailableParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPagedAvailablePartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Keeptrack2ServiceServer).QueryPagedAvailableParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/keeptrack2.Keeptrack2Service/QueryPagedAvailableParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Keeptrack2ServiceServer).QueryPagedAvailableParts(ctx, req.(*QueryPagedAvailablePartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Keeptrack2Service_ServiceDesc is the grpc.ServiceDesc for Keeptrack2Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Keeptrack2Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "keeptrack2.Keeptrack2Service",
	HandlerType: (*Keeptrack2ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProject",
			Handler:    _Keeptrack2Service_CreateProject_Handler,
		},
		{
			MethodName: "DeleteProjectById",
			Handler:    _Keeptrack2Service_DeleteProjectById_Handler,
		},
		{
			MethodName: "UpdateProjectById",
			Handler:    _Keeptrack2Service_UpdateProjectById_Handler,
		},
		{
			MethodName: "QueryProjectById",
			Handler:    _Keeptrack2Service_QueryProjectById_Handler,
		},
		{
			MethodName: "QueryAllProjects",
			Handler:    _Keeptrack2Service_QueryAllProjects_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _Keeptrack2Service_CreateItem_Handler,
		},
		{
			MethodName: "DeleteItemById",
			Handler:    _Keeptrack2Service_DeleteItemById_Handler,
		},
		{
			MethodName: "UpdateItemById",
			Handler:    _Keeptrack2Service_UpdateItemById_Handler,
		},
		{
			MethodName: "QueryAvailableItemById",
			Handler:    _Keeptrack2Service_QueryAvailableItemById_Handler,
		},
		{
			MethodName: "QueryPagedAvailableItems",
			Handler:    _Keeptrack2Service_QueryPagedAvailableItems_Handler,
		},
		{
			MethodName: "CreatePart",
			Handler:    _Keeptrack2Service_CreatePart_Handler,
		},
		{
			MethodName: "DeletePartById",
			Handler:    _Keeptrack2Service_DeletePartById_Handler,
		},
		{
			MethodName: "UpdatePartById",
			Handler:    _Keeptrack2Service_UpdatePartById_Handler,
		},
		{
			MethodName: "UpdatePartStatusById",
			Handler:    _Keeptrack2Service_UpdatePartStatusById_Handler,
		},
		{
			MethodName: "QueryAvailablePartById",
			Handler:    _Keeptrack2Service_QueryAvailablePartById_Handler,
		},
		{
			MethodName: "QueryPagedAvailableParts",
			Handler:    _Keeptrack2Service_QueryPagedAvailableParts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keeptrack2/keeptrack2.proto",
}
